{"version":3,"sources":["components/pages/Pathfind/PathfindStyle.js","components/pages/Pathfind/core/StyledComponent.js","algorithms/dijkstra.js","components/pages/Pathfind/Pathfind.jsx","components/pages/Pathfind/PathfindPage.jsx","route/MainRoute.jsx","serviceWorker.js","index.js"],"names":["styles","main","width","height","backgroundColor","title","flexGrow","top_navigation_bar","position","left","top","right","left_tool_box","bottom","main_canvas","canvas_cell","canvas_cell_created","animationName","animationDuration","animationTimingFunction","animationDelay","animationDirection","animationIterationCount","animationFillMode","animationPlayState","canvas_cell_test","border","hoverButton","extend","background","transform","StyledComponent","styleMap","children","createUseStyles","dijkstra","oldGrid","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","grid","modifyGrid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","row","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","getNodesInShortestPathOrder","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","col","filter","neighbor","getUnvisitedNeighbors","previousNode","currentRow","createNode","isStart","isFinish","nodesInShortestPathOrder","currentNode","unshift","PathFind","initCanvas","console","log","paper","setup","canvas","getInitialGrid","createInitialCanvasNodes","trySetUpInitStartAndFinish","tryInitStartAndFinish","nodeSize","state","gridLineWidth","rows","Math","ceil","cols","canvasNodeGroup","Group","path","Shape","Rectangle","fillColor","center","size","name","addChild","text","PointText","Point","justification","content","onMouseDown","event","currentX","point","x","currentY","y","floor","currentCol","onMouseDownNodeType","specialNodesProps","onDragSpecial","isCoorsChange","mouseDownOnce","brush","type","onEraseMode","onMouseDrag","canvasWidth","canvasHeight","canDraw","hasStart","startRow","startCol","hasFinish","finishRow","finishCol","brushDict","isRenderingAlgo","printDijkstra","animateNode","color","coors","getNodeIndexAtPosition","lastRow","lastCol","posX","posY","colorBefore","tween","easing","duration","then","tweenTo","initCanvasGridSize","setBrush","brushType","includes","setType","temp","resultArray","forEach","visitedNodeColor","shortestPathColor","switchRenderingAlgo","lastRenderingState","setState","switchGridLineVisibility","handleClose","showTips","handleClickOpen","empty","wall","start","finish","typeName","this","gridRows","gridCols","gridLineColor","undefined","tools","tool","remove","Tool","view","onResize","PathfindStyle","useStyles","props","className","id","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","List","component","ListItem","FormControlLabel","control","Switch","checked","onChange","label","Button","onClick","Divider","test1","Dialog","open","TransitionComponent","Transition","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","test2","resize","style","ref","el","Component","React","forwardRef","Slide","direction","PathfindPage","MainRoute","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.51a3b2fb.chunk.js","sourcesContent":["const topNavBarHeight = '64px';\r\nconst leftToolboxWidth = '200px';\r\n\r\nconst toolBoxColor = '#828282';\r\nconst defaultBackgroundColor = '#FCFAF2';\r\n\r\nconst styles = {\r\n    main: {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        backgroundColor: defaultBackgroundColor,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    top_navigation_bar: {\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n        right: '0px',\r\n        height: topNavBarHeight,\r\n        backgroundColor: toolBoxColor,\r\n    },\r\n    left_tool_box: {\r\n        position: 'absolute',\r\n        left: '0px',\r\n        width: leftToolboxWidth,\r\n        top: topNavBarHeight,\r\n        bottom: '0px',\r\n        // backgroundColor: toolBoxColor,\r\n    },\r\n    main_canvas: {\r\n        position: 'absolute',\r\n        left: leftToolboxWidth,\r\n        right: '0px',\r\n        top: topNavBarHeight,\r\n        bottom: '0px',\r\n        backgroundColor: 'green',\r\n    },\r\n    canvas_cell: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'red',\r\n        // border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n        // '&:hover': {\r\n        //   background: 'blue',\r\n        // },\r\n    },\r\n    canvas_cell_created: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'blue',\r\n        // border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n        animationName: '$jumpOut',\r\n        animationDuration: '0.3s',\r\n        animationTimingFunction: 'ease-out',\r\n        animationDelay: '0',\r\n        animationDirection: 'alternate',\r\n        animationIterationCount: '1',\r\n        animationFillMode: 'forwards',\r\n        animationPlayState: 'running',\r\n    },\r\n    canvas_cell_test: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'green',\r\n        border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n    },\r\n    hoverButton: {\r\n        extend: 'button',\r\n        background: 'yellow',\r\n        '&:active': {\r\n            background: 'red',\r\n        },\r\n    },\r\n    '@keyframes jumpOut': {\r\n        '0%': {\r\n            transform: 'scale(.3)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n        '50%': {\r\n            transform: 'scale(1.2)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n        '100%': {\r\n            transform: 'scale(1.0)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n    },\r\n};\r\n\r\nexport default styles;","import { createUseStyles } from 'react-jss'\r\n\r\nfunction StyledComponent({ styleMap, children }) {\r\n    return children(createUseStyles(styleMap));\r\n}\r\n\r\nexport default StyledComponent;","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(oldGrid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) {\n    const grid = modifyGrid(oldGrid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL)\n\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return [visitedNodesInOrder, null];\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return [visitedNodesInOrder, getNodesInShortestPathOrder(finishNode)];\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// const getAllNodesModified = (grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n//     const nodes = [];\n//     for (let row = 0; row < grid.length; row++) {\n//         for (let col = 0; col < grid[0].length; col++) {\n//             const isWall = grid[row][col] === 'wall';\n//             nodes.push(createNode(isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL));\n//         }\n//     }\n//     return nodes;\n// };\n\nconst modifyGrid = (grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n    const nodes = [];\n    for (let row = 0; row < grid.length; row++) {\n        const currentRow = [];\n        for (let col = 0; col < grid[0].length; col++) {\n            const isWall = grid[row][col] === 'wall';\n            currentRow.push(createNode(isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL));\n        }\n        nodes.push(currentRow);\n    }\n    return nodes;\n};\n\nconst createNode = (isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: isWall,\n        previousNode: null,\n    };\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nfunction getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\r\nimport PathfindStyle from './PathfindStyle';\r\nimport paper, { Tool, Shape, Group, Point, PointText } from 'paper';\r\nimport StyledComponent from './core/StyledComponent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nimport { dijkstra } from '../../../algorithms/dijkstra';\r\n\r\nexport default class PathFind extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { nodeSize: 40, isRenderingAlgo: false, showTips: false };\r\n\r\n    // **** global variables ****\r\n    this.brush = {\r\n      type: 'wall',\r\n      color: 'black',\r\n      brushDict: { empty: 'white', wall: 'black', start: '#20e82a', finish: 'red' },\r\n      setType: function (typeName) {\r\n        this.type = typeName;\r\n        this.color = this.brushDict[typeName];\r\n        console.log(this.color);\r\n      },\r\n    };\r\n\r\n    // for nodes type in grid:\r\n    // empty    : 'empty'\r\n    // wall     : 'wall'\r\n    // start    : 'start'\r\n    // finish   : 'finish'\r\n    // // visited  : 'visited'\r\n    // // path     : 'path'\r\n    this.grid = [];\r\n    this.gridRows = 20;\r\n    this.gridCols = 40;\r\n    this.backgroundColor = 'white';\r\n    this.visitedNodeColor = '#3A8FB7';\r\n    this.shortestPathColor = '#d6ff75';\r\n    this.gridLineColor = '#777777';\r\n    this.gridLineWidth = 1;\r\n\r\n    this.canvasNodeGroup = undefined;\r\n    this.onMouseDownNodeType = '';\r\n    this.mouseDownOnce = false;\r\n    this.onEraseMode = false;\r\n\r\n    this.specialNodesProps = {\r\n      startRow: -1,\r\n      startCol: -1,\r\n      finishRow: -1,\r\n      finishCol: -1,\r\n      hasStart: false,\r\n      hasFinish: false,\r\n      onDragSpecial: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // setup paper\r\n    paper.setup(this.canvas);\r\n    paper.tools.forEach((tool) => tool.remove());\r\n    const tool = new Tool();\r\n    tool.onMouseDrag = (event) => {\r\n      this.onMouseDrag(event);\r\n    };\r\n    tool.onMouseDown = (event) => {\r\n      this.onMouseDown(event);\r\n    };\r\n    paper.view.onResize = () => {\r\n      this.initCanvas();\r\n    };\r\n\r\n    this.initCanvas();\r\n  }\r\n\r\n  initCanvas = () => {\r\n    console.log('initing canvas');\r\n    paper.setup(this.canvas);\r\n\r\n    // TODO: should save previous state, copy from it\r\n    this.grid = this.getInitialGrid();\r\n    this.createInitialCanvasNodes();\r\n\r\n    this.trySetUpInitStartAndFinish();\r\n    this.tryInitStartAndFinish();\r\n  };\r\n\r\n  createInitialCanvasNodes = () => {\r\n    const nodeSize = this.state.nodeSize;\r\n    const gridLineWidth = this.gridLineWidth;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n    var canvasNodeGroup = new Group();\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        const path = new Shape.Rectangle({\r\n          fillColor: 'white',\r\n          center: [col * nodeSize + nodeSize / 2, row * nodeSize + nodeSize / 2],\r\n          size: nodeSize - gridLineWidth,\r\n          name: `${row}-${col}`,\r\n        });\r\n        canvasNodeGroup.addChild(path);\r\n\r\n        if (row === 0 || col === 0) {\r\n          const text = new PointText(new Point(col * nodeSize + nodeSize / 2, row * nodeSize + nodeSize / 2));\r\n          text.justification = 'center';\r\n          text.fillColor = 'grey';\r\n          text.content = row === 0 ? col : row;\r\n          canvasNodeGroup.addChild(text);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.canvasNodeGroup = canvasNodeGroup;\r\n  };\r\n\r\n  getInitialGrid = () => {\r\n    const nodeSize = this.state.nodeSize;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n\r\n    const grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        currentRow.push('empty');\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  onMouseDown = (event) => {\r\n    const currentX = event.point.x;\r\n    const currentY = event.point.y;\r\n    const nodeSize = this.state.nodeSize;\r\n    const currentRow = Math.floor(currentY / nodeSize);\r\n    const currentCol = Math.floor(currentX / nodeSize);\r\n\r\n    if (this.grid[currentRow][currentCol] === 'start' || this.grid[currentRow][currentCol] === 'finish') {\r\n      this.onMouseDownNodeType = this.grid[currentRow][currentCol];\r\n      this.specialNodesProps.onDragSpecial = true;\r\n    } else {\r\n      this.onMouseDownNodeType = '';\r\n      this.specialNodesProps.onDragSpecial = false;\r\n    }\r\n    if (this.isCoorsChange(currentRow, currentCol)) {\r\n      this.mouseDownOnce = true;\r\n    }\r\n\r\n    if (this.brush.type === 'wall' && this.grid[currentRow][currentCol] === 'wall') {\r\n      this.onEraseMode = true;\r\n    } else {\r\n      this.onEraseMode = false;\r\n    }\r\n\r\n    this.onMouseDrag(event);\r\n  };\r\n\r\n  onMouseDrag = (event) => {\r\n    const currentX = event.point.x;\r\n    const currentY = event.point.y;\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    const nodeSize = this.state.nodeSize;\r\n    const currentRow = Math.floor(currentY / nodeSize);\r\n    const currentCol = Math.floor(currentX / nodeSize);\r\n    const brush = this.brush;\r\n    var canDraw = true;\r\n\r\n    if (currentX > canvasWidth || currentX < 0 || currentY > canvasHeight || currentY < 0) {\r\n      return;\r\n    }\r\n\r\n    // if pointed node is undefined, return\r\n    if (!this.grid[currentRow][currentCol]) return;\r\n\r\n    if (this.grid[currentRow][currentCol] === 'start' || this.grid[currentRow][currentCol] === 'finish') return;\r\n\r\n    // if (this.grid[currentRow][currentCol] === brush.type)\r\n\r\n    const specialNodesProps = this.specialNodesProps;\r\n    switch (brush.type) {\r\n      case 'start':\r\n        if (!specialNodesProps.hasStart) {\r\n          specialNodesProps.hasStart = true;\r\n          specialNodesProps.startRow = currentRow;\r\n          specialNodesProps.startCol = currentCol;\r\n        } else canDraw = false;\r\n        break;\r\n      case 'finish':\r\n        if (!specialNodesProps.hasFinish) {\r\n          specialNodesProps.hasFinish = true;\r\n          specialNodesProps.finishRow = currentRow;\r\n          specialNodesProps.finishCol = currentCol;\r\n        } else canDraw = false;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (this.onMouseDownNodeType === 'start' || this.onMouseDownNodeType === 'finish') {\r\n      specialNodesProps.onDragSpecial = true;\r\n    }\r\n\r\n    // TODO\r\n    // if (this.onMouseDownNodeType === brush.type) {\r\n    //   if (this.onMouseDownNodeType === 'empty') brush.setType('wall');\r\n    //   else if (this.onMouseDownNodeType === 'wall') brush.setType('empty');\r\n    // }\r\n\r\n    if (this.specialNodesProps.onDragSpecial) {\r\n      canDraw = false;\r\n\r\n      if (this.onMouseDownNodeType === 'start') {\r\n        const lastNode = this.canvasNodeGroup.children[`${specialNodesProps.startRow}-${specialNodesProps.startCol}`];\r\n        lastNode.fillColor = brush.brushDict['empty'];\r\n        if (specialNodesProps.startRow !== currentRow || specialNodesProps.startCol !== currentCol) {\r\n          this.grid[specialNodesProps.startRow][specialNodesProps.startCol] = 'empty';\r\n          this.grid[currentRow][currentCol] = 'start';\r\n\r\n          specialNodesProps.startRow = currentRow;\r\n          specialNodesProps.startCol = currentCol;\r\n          // print Dijkstra\r\n          if (this.state.isRenderingAlgo) this.printDijkstra();\r\n        }\r\n      } else if (this.onMouseDownNodeType === 'finish') {\r\n        const lastNode = this.canvasNodeGroup.children[`${specialNodesProps.finishRow}-${specialNodesProps.finishCol}`];\r\n        lastNode.fillColor = brush.brushDict['empty'];\r\n        if (specialNodesProps.finishRow !== currentRow || specialNodesProps.finishCol !== currentCol) {\r\n          this.grid[specialNodesProps.finishRow][specialNodesProps.finishCol] = 'empty';\r\n          this.grid[currentRow][currentCol] = 'finish';\r\n\r\n          specialNodesProps.finishRow = currentRow;\r\n          specialNodesProps.finishCol = currentCol;\r\n          // print Dijkstra\r\n          if (this.state.isRenderingAlgo) this.printDijkstra();\r\n        }\r\n      }\r\n\r\n      const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n      path.fillColor = brush.brushDict[this.onMouseDownNodeType];\r\n    }\r\n\r\n    // TODO:\r\n    if (canDraw) {\r\n      if (brush.type !== 'start' && this.grid[currentRow][currentCol] === 'start') {\r\n        specialNodesProps.startRow = -1;\r\n        specialNodesProps.startCol = -1;\r\n        specialNodesProps.hasStart = false;\r\n      } else if (brush.type !== 'finish' && this.grid[currentRow][currentCol] === 'finish') {\r\n        specialNodesProps.finishRow = -1;\r\n        specialNodesProps.finishCol = -1;\r\n        specialNodesProps.hasFinish = false;\r\n      }\r\n\r\n      // on Erase Mode\r\n      if (this.onEraseMode) {\r\n        this.grid[currentRow][currentCol] = 'empty';\r\n        const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n        path.fillColor = brush.brushDict['empty'];\r\n        this.animateNode(path);\r\n      } else {\r\n        this.grid[currentRow][currentCol] = brush.type;\r\n        const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n        path.fillColor = brush.color;\r\n        this.animateNode(path);\r\n      }\r\n    }\r\n\r\n    if (this.isCoorsChange(currentRow, currentCol) || this.mouseDownOnce) {\r\n      this.mouseDownOnce = false;\r\n      if (this.state.isRenderingAlgo) this.printDijkstra();\r\n    }\r\n  };\r\n\r\n  trySetUpInitStartAndFinish = () => {\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    if (canvasWidth > 400 && canvasHeight > 400) {\r\n      const coors = this.getNodeIndexAtPosition(canvasWidth, canvasHeight);\r\n      this.specialNodesProps = {\r\n        startRow: Math.floor(coors[0] / 2),\r\n        startCol: Math.floor(coors[1] / 3),\r\n        finishRow: Math.floor(coors[0] / 2),\r\n        finishCol: Math.floor((2 * coors[1]) / 3),\r\n        hasStart: true,\r\n        hasFinish: true,\r\n      };\r\n      this.grid[this.specialNodesProps.startRow][this.specialNodesProps.startCol] = 'start';\r\n      this.grid[this.specialNodesProps.finishRow][this.specialNodesProps.finishCol] = 'finish';\r\n    } else {\r\n      this.specialNodesProps = {\r\n        startRow: -1,\r\n        startCol: -1,\r\n        finishRow: -1,\r\n        finishCol: -1,\r\n        hasStart: false,\r\n        hasFinish: false,\r\n        lastRow: -1,\r\n        lastCol: -1,\r\n      };\r\n    }\r\n  };\r\n\r\n  getNodeIndexAtPosition = (posX, posY) => {\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    const nodeSize = this.state.nodeSize;\r\n\r\n    const row = Math.floor(canvasHeight / nodeSize);\r\n    const col = Math.floor(canvasWidth / nodeSize);\r\n    return [row, col];\r\n  };\r\n\r\n  tryInitStartAndFinish = () => {\r\n    const hasStart = this.specialNodesProps.hasStart;\r\n    const hasFinish = this.specialNodesProps.hasFinish;\r\n    const startRow = this.specialNodesProps.startRow;\r\n    const startCol = this.specialNodesProps.startCol;\r\n    const finishRow = this.specialNodesProps.finishRow;\r\n    const finishCol = this.specialNodesProps.finishCol;\r\n\r\n    if (hasStart) {\r\n      const path = this.canvasNodeGroup.children[`${startRow}-${startCol}`];\r\n      path.fillColor = this.brush.brushDict['start'];\r\n      this.grid[startRow][startCol] = 'start';\r\n    }\r\n    if (hasFinish) {\r\n      const path = this.canvasNodeGroup.children[`${finishRow}-${finishCol}`];\r\n      path.fillColor = this.brush.brushDict['finish'];\r\n      this.grid[finishRow][finishCol] = 'finish';\r\n    }\r\n  };\r\n\r\n  isCoorsChange = (currentRow, currentCol) => {\r\n    const specialNodesProps = this.specialNodesProps;\r\n    if (specialNodesProps.lastRow !== currentRow || specialNodesProps.lastCol !== currentCol) {\r\n      specialNodesProps.lastRow = currentRow;\r\n      specialNodesProps.lastCol = currentCol;\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  animateNode = (path) => {\r\n    const colorBefore = path.fillColor;\r\n    path.fillColor = 'yellow';\r\n    const tween = path.tween(\r\n      {\r\n        size: this.state.nodeSize + 5,\r\n        fillColor: '#fffc4f',\r\n      },\r\n      {\r\n        easing: 'easeInOutCubic',\r\n        duration: 200,\r\n      }\r\n    );\r\n    tween.then(() => {\r\n      // ...tween color back to color before.\r\n      path.tweenTo(\r\n        {\r\n          size: this.state.nodeSize - this.gridLineWidth,\r\n          fillColor: colorBefore,\r\n        },\r\n        300\r\n      );\r\n    });\r\n  };\r\n\r\n  test1() {\r\n    console.log('test1:');\r\n    console.log(this.state.isRenderingAlgo);\r\n    console.log(this.specialNodesProps);\r\n  }\r\n\r\n  test2() {\r\n    console.log('test2:');\r\n  }\r\n\r\n  initCanvasGridSize = () => {\r\n    const nodeSize = this.state.nodeSize;\r\n    const gridLineWidth = this.gridLineWidth;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        if (this.canvasNodeGroup.children[`${row}-${col}`]) {\r\n          const path = this.canvasNodeGroup.children[`${row}-${col}`];\r\n          path.size = nodeSize - gridLineWidth;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  setBrush = (brushType) => {\r\n    if (['empty', 'wall', 'start', 'finish'].includes(brushType)) {\r\n      this.brush.setType(brushType);\r\n    }\r\n  };\r\n\r\n  printDijkstra = () => {\r\n    const temp = this.specialNodesProps;\r\n    if (!temp.hasStart || !temp.hasFinish) {\r\n      console.log('missing start or finish node');\r\n      return;\r\n    }\r\n\r\n    const resultArray = dijkstra(this.grid, temp.startRow, temp.startCol, temp.finishRow, temp.finishCol);\r\n    const visitedNodesInOrder = resultArray[0];\r\n    const nodesInShortestPathOrder = resultArray[1];\r\n\r\n    for (let row = 0; row < this.grid.length; row++) {\r\n      for (let col = 0; col < this.grid[0].length; col++) {\r\n        const path = this.canvasNodeGroup.children[`${row}-${col}`];\r\n        path.fillColor = this.brush.brushDict[this.grid[row][col]];\r\n      }\r\n    }\r\n\r\n    if (visitedNodesInOrder !== null) {\r\n      visitedNodesInOrder.forEach((node) => {\r\n        const path = this.canvasNodeGroup.children[`${node.row}-${node.col}`];\r\n        if (\r\n          (node.row !== temp.startRow || node.col !== temp.startCol) &&\r\n          (node.row !== temp.finishRow || node.col !== temp.finishCol)\r\n        )\r\n          path.fillColor = this.visitedNodeColor;\r\n      });\r\n    } else {\r\n      console.log('visitedNodesInOrder is null');\r\n    }\r\n\r\n    if (nodesInShortestPathOrder !== null) {\r\n      nodesInShortestPathOrder.forEach((node) => {\r\n        const path = this.canvasNodeGroup.children[`${node.row}-${node.col}`];\r\n        if (\r\n          (node.row !== temp.startRow || node.col !== temp.startCol) &&\r\n          (node.row !== temp.finishRow || node.col !== temp.finishCol)\r\n        ) {\r\n          path.fillColor = this.shortestPathColor;\r\n        }\r\n      });\r\n    } else {\r\n      console.log('nodesInShortestPathOrder is null');\r\n    }\r\n  };\r\n\r\n  switchRenderingAlgo = () => {\r\n    const lastRenderingState = this.state.isRenderingAlgo;\r\n    this.setState({ isRenderingAlgo: !lastRenderingState });\r\n    if (!lastRenderingState) {\r\n      this.printDijkstra();\r\n    } else {\r\n      for (let row = 0; row < this.grid.length; row++) {\r\n        for (let col = 0; col < this.grid[0].length; col++) {\r\n          const path = this.canvasNodeGroup.children[`${row}-${col}`];\r\n          path.fillColor = this.brush.brushDict[this.grid[row][col]];\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  switchGridLineVisibility = () => {\r\n    if (this.gridLineWidth === 0) this.gridLineWidth = 1;\r\n    else if (this.gridLineWidth === 1) this.gridLineWidth = 0;\r\n    else this.gridLineWidth = 1;\r\n    this.initCanvasGridSize();\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ showTips: false });\r\n  };\r\n\r\n  handleClickOpen = () => {\r\n    this.setState({ showTips: true });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledComponent styleMap={PathfindStyle}>\r\n        {(useStyles) => {\r\n          const styles = useStyles(this.props);\r\n          return (\r\n            <div className={styles.main}>\r\n              <div className={styles.top_navigation_bar} id=\"top_navigation_bar\">\r\n                <AppBar position=\"static\">\r\n                  <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                      <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={styles.title}>\r\n                      Interactive Visualized Pathfinder\r\n                    </Typography>\r\n                    {/* <Button color=\"inherit\">Login</Button> */}\r\n                  </Toolbar>\r\n                </AppBar>\r\n              </div>\r\n              <div className={styles.left_tool_box}>\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                  <ListItem>\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Switch\r\n                          checked={this.state.isRenderingAlgo}\r\n                          onChange={this.switchRenderingAlgo}\r\n                          name=\"switchRenderingAlgo\"\r\n                          color=\"primary\"\r\n                        />\r\n                      }\r\n                      label=\"Auto-Render\"\r\n                    />\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.switchGridLineVisibility()}>\r\n                      Grid\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('start')}>\r\n                      start\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('finish')}>\r\n                      finish\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('wall')}>\r\n                      wall\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.initCanvas()}>\r\n                      reset\r\n                    </Button>\r\n                  </ListItem>\r\n                  <Divider />\r\n                  {/* <ListItem>\r\n                    <ExpansionPanel>\r\n                      <ExpansionPanelSummary\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls=\"panel1a-content\"\r\n                        id=\"panel1a-header\"\r\n                      >\r\n                        <Typography className={styles.title}>Algorithms</Typography>\r\n                      </ExpansionPanelSummary>\r\n                      <ExpansionPanelDetails>\r\n                        <div>\r\n                          <Button variant=\"outlined\">HAHA</Button>\r\n                          <Button variant=\"outlined\">HAHA</Button>\r\n                          <Button variant=\"outlined\">HAHA</Button>\r\n                        </div>\r\n                      </ExpansionPanelDetails>\r\n                    </ExpansionPanel>\r\n                  </ListItem> */}\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.test1()}>\r\n                      Props\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <div>\r\n                      <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                        Show Guides\r\n                      </Button>\r\n                      <Dialog\r\n                        open={this.state.showTips}\r\n                        TransitionComponent={Transition}\r\n                        keepMounted\r\n                        onClose={this.handleClose}\r\n                        aria-labelledby=\"alert-dialog-slide-title\"\r\n                        aria-describedby=\"alert-dialog-slide-description\"\r\n                      >\r\n                        <DialogTitle id=\"alert-dialog-slide-title\">{\"Use Google's location service?\"}</DialogTitle>\r\n                        <DialogContent>\r\n                          <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            Let Google help apps determine location. This means sending anonymous location data to\r\n                            Google, even when no apps are running.\r\n                          </DialogContentText>\r\n                        </DialogContent>\r\n                        <DialogActions>\r\n                          <Button onClick={this.handleClose} color=\"primary\">\r\n                            Disagree\r\n                          </Button>\r\n                          <Button onClick={this.handleClose} color=\"primary\">\r\n                            Agree\r\n                          </Button>\r\n                        </DialogActions>\r\n                      </Dialog>\r\n                    </div>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.test2()}>\r\n                      TEST2\r\n                    </Button>\r\n                  </ListItem>\r\n                </List>\r\n              </div>\r\n              <div className={styles.main_canvas}>\r\n                <canvas\r\n                  resize=\"true\"\r\n                  style={{ width: '100%', height: '100%', backgroundColor: this.gridLineColor }}\r\n                  ref={(el) => {\r\n                    this.canvas = el;\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </StyledComponent>\r\n    );\r\n  }\r\n}\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n","import React from 'react';\r\nimport Pathfind from './Pathfind';\r\n\r\nconst PathfindPage = () => {\r\n  return (\r\n    <div>\r\n      <Pathfind />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathfindPage;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PathfindPage from '../components/pages/Pathfind/PathfindPage';\r\n\r\nconst MainRoute = () => (\r\n  <Switch>\r\n    <Route path=\"/visual-pathfind\">\r\n      <PathfindPage></PathfindPage>\r\n    </Route>\r\n    <Route path=\"/\">\r\n      <Redirect to=\"/visual-pathfind\" />\r\n    </Route>\r\n  </Switch>\r\n);\r\n\r\nexport default MainRoute;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainRoute from './route/MainRoute';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Pathfind from './components/pages/Pathfind/Pathfind'\n\nReactDOM.render(\n    // TODO: React.StrictMode\n    // <React.StrictMode>\n    //     <Router>\n    //         <MainRoute />\n    //     </Router>\n    // </React.StrictMode>,\n    <Router>\n        <MainRoute />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}