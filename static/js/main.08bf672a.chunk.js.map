{"version":3,"sources":["components/pages/Pathfind/PathfindStyle.js","components/pages/Pathfind/core/StyledComponent.js","algorithms/dijkstra.js","components/pages/Pathfind/Pathfind.jsx","components/pages/Pathfind/PathfindPage.jsx","route/MainRoute.jsx","serviceWorker.js","index.js"],"names":["styles","main","width","height","backgroundColor","title","flexGrow","top_navigation_bar","position","left","top","right","left_tool_box","bottom","main_canvas","canvas_cell","canvas_cell_created","animationName","animationDuration","animationTimingFunction","animationDelay","animationDirection","animationIterationCount","animationFillMode","animationPlayState","canvas_cell_test","border","hoverButton","extend","background","transform","StyledComponent","styleMap","children","createUseStyles","dijkstra","oldGrid","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","grid","modifyGrid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","row","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","getNodesInShortestPathOrder","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","col","filter","neighbor","getUnvisitedNeighbors","previousNode","currentRow","createNode","isStart","isFinish","nodesInShortestPathOrder","currentNode","unshift","PathFind","resetCanvas","console","log","paper","setup","canvas","getInitialNodes","getInitialCanvasNodes","setUpInitStartFinishNodeInView","initStartAndFinishNodeIfHave","needInitCanvas","onMouseDown","event","currentX","point","x","currentY","y","nodeSize","state","Math","floor","currentCol","onMouseDownNodeType","specialNodesProps","onDragSpecial","isCoorsChange","mouseDownOnce","onMouseDrag","canvasWidth","canvasHeight","brush","canDraw","type","hasStart","startRow","startCol","hasFinish","finishRow","finishCol","canvasNodeGroup","fillColor","brushDict","onDrawAlgo","printDijkstra","path","color","animateNode","coors","getNodeIndexAtPosition","lastRow","lastCol","posX","posY","colorBefore","tween","size","easing","duration","then","tweenTo","gridLineWidth","rows","ceil","cols","Group","Shape","Rectangle","center","name","addChild","text","PointText","Point","justification","content","resetCanvasGridSize","setBrush","brushType","includes","setType","temp","resultArray","forEach","animateAlgorithm","empty","wall","start","finish","typeName","this","gridRows","gridCols","gridLineColor","undefined","tools","tool","remove","Tool","view","onResize","PathfindStyle","useStyles","props","className","id","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","List","component","ListItem","button","onClick","brushColor","ListItemText","primary","Divider","Button","test1","test2","resize","style","ref","el","Component","PathfindPage","MainRoute","to","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.08bf672a.chunk.js","sourcesContent":["const topNavBarHeight = '64px';\r\nconst leftToolboxWidth = '160px';\r\n\r\nconst toolBoxColor = '#828282';\r\nconst defaultBackgroundColor = '#FCFAF2';\r\n\r\nconst styles = {\r\n    main: {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        backgroundColor: defaultBackgroundColor,\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    top_navigation_bar: {\r\n        position: 'absolute',\r\n        left: '0px',\r\n        top: '0px',\r\n        right: '0px',\r\n        height: topNavBarHeight,\r\n        backgroundColor: toolBoxColor,\r\n    },\r\n    left_tool_box: {\r\n        position: 'absolute',\r\n        left: '0px',\r\n        width: leftToolboxWidth,\r\n        top: topNavBarHeight,\r\n        bottom: '0px',\r\n        // backgroundColor: toolBoxColor,\r\n    },\r\n    main_canvas: {\r\n        position: 'absolute',\r\n        left: leftToolboxWidth,\r\n        right: '0px',\r\n        top: topNavBarHeight,\r\n        bottom: '0px',\r\n        backgroundColor: 'green',\r\n    },\r\n    canvas_cell: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'red',\r\n        // border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n        // '&:hover': {\r\n        //   background: 'blue',\r\n        // },\r\n    },\r\n    canvas_cell_created: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'blue',\r\n        // border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n        animationName: '$jumpOut',\r\n        animationDuration: '0.3s',\r\n        animationTimingFunction: 'ease-out',\r\n        animationDelay: '0',\r\n        animationDirection: 'alternate',\r\n        animationIterationCount: '1',\r\n        animationFillMode: 'forwards',\r\n        animationPlayState: 'running',\r\n    },\r\n    canvas_cell_test: {\r\n        position: 'absolute',\r\n        top: '0px',\r\n        backgroundColor: 'green',\r\n        border: 'solid 1px black',\r\n        width: '20px',\r\n        height: '20px',\r\n    },\r\n    hoverButton: {\r\n        extend: 'button',\r\n        background: 'yellow',\r\n        '&:active': {\r\n            background: 'red',\r\n        },\r\n    },\r\n    '@keyframes jumpOut': {\r\n        '0%': {\r\n            transform: 'scale(.3)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n        '50%': {\r\n            transform: 'scale(1.2)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n        '100%': {\r\n            transform: 'scale(1.0)',\r\n            backgroundColor: 'rgb(12, 53, 71)',\r\n        },\r\n    },\r\n};\r\n\r\nexport default styles;","import { createUseStyles } from 'react-jss'\r\n\r\nfunction StyledComponent({ styleMap, children }) {\r\n    return children(createUseStyles(styleMap));\r\n}\r\n\r\nexport default StyledComponent;","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(oldGrid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) {\n    const grid = modifyGrid(oldGrid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL)\n\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return [visitedNodesInOrder, null];\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return [visitedNodesInOrder, getNodesInShortestPathOrder(finishNode)];\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        neighbor.distance = node.distance + 1;\n        neighbor.previousNode = node;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// const getAllNodesModified = (grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n//     const nodes = [];\n//     for (let row = 0; row < grid.length; row++) {\n//         for (let col = 0; col < grid[0].length; col++) {\n//             const isWall = grid[row][col] === 'wall';\n//             nodes.push(createNode(isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL));\n//         }\n//     }\n//     return nodes;\n// };\n\nconst modifyGrid = (grid, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n    const nodes = [];\n    for (let row = 0; row < grid.length; row++) {\n        const currentRow = [];\n        for (let col = 0; col < grid[0].length; col++) {\n            const isWall = grid[row][col] === 'wall';\n            currentRow.push(createNode(isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL));\n        }\n        nodes.push(currentRow);\n    }\n    return nodes;\n};\n\nconst createNode = (isWall, col, row, START_NODE_ROW, START_NODE_COL, FINISH_NODE_ROW, FINISH_NODE_COL) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: isWall,\n        previousNode: null,\n    };\n};\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nfunction getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n","import React, { Component } from 'react';\r\nimport PathfindStyle from './PathfindStyle';\r\nimport paper, { Tool, Shape, Group, Point, PointText } from 'paper';\r\nimport StyledComponent from './core/StyledComponent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nimport { dijkstra } from '../../../algorithms/dijkstra';\r\n\r\nexport default class PathFind extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { nodeSize: 40 };\r\n\r\n    // **** global variables ****\r\n    this.brush = {\r\n      type: 'wall',\r\n      color: 'black',\r\n      brushDict: { empty: 'white', wall: 'black', start: '#20e82a', finish: 'red' },\r\n      setType: function (typeName) {\r\n        this.type = typeName;\r\n        this.color = this.brushDict[typeName];\r\n        console.log(this.color);\r\n      },\r\n    };\r\n\r\n    // for nodes type in grid:\r\n    // empty    : 'empty'\r\n    // wall     : 'wall'\r\n    // start    : 'start'\r\n    // finish   : 'finish'\r\n    // visited  : 'visited'\r\n    // path     : 'path'\r\n    this.grid = [];\r\n    this.gridRows = 20;\r\n    this.gridCols = 40;\r\n    this.backgroundColor = 'white';\r\n    this.gridLineColor = '#777777';\r\n    this.gridLineWidth = 1;\r\n\r\n    this.canvasNodeGroup = undefined;\r\n    this.needInitCanvas = true;\r\n    this.onMouseDownNodeType = '';\r\n    this.mouseDownOnce = false;\r\n    this.onDrawAlgo = false;\r\n    this.specialNodesProps = {\r\n      startRow: -1,\r\n      startCol: -1,\r\n      finishRow: -1,\r\n      finishCol: -1,\r\n      hasStart: false,\r\n      hasFinish: false,\r\n      onDragSpecial: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    paper.setup(this.canvas);\r\n    paper.tools.forEach((tool) => tool.remove());\r\n    const tool = new Tool();\r\n    tool.onMouseDrag = (event) => {\r\n      this.onMouseDrag(event);\r\n    };\r\n    tool.onMouseDown = (event) => {\r\n      this.onMouseDown(event);\r\n    };\r\n    paper.view.onResize = () => {\r\n      this.resetCanvas();\r\n    };\r\n\r\n    this.resetCanvas();\r\n    // if (this.needInitCanvas) {\r\n    //   this.grid = this.getInitialNodes();\r\n    //   this.getInitialCanvasNodes();\r\n    //   this.needInitCanvas = false;\r\n    //   console.log('init');\r\n    // }\r\n  }\r\n\r\n  resetCanvas = () => {\r\n    console.log('resized, resetting canvas');\r\n    paper.setup(this.canvas);\r\n    // TODO: don't know if this block is nessesary\r\n    /* \r\n      paper.tools.forEach((tool) => tool.remove());\r\n      const tool = new Tool();\r\n      tool.onMouseDrag = (event) => {\r\n        this.onMouseDrag(event);\r\n      };\r\n    */\r\n    // TODO: should save previous state, copy from it\r\n    this.grid = this.getInitialNodes();\r\n    this.getInitialCanvasNodes();\r\n\r\n    this.setUpInitStartFinishNodeInView();\r\n    this.initStartAndFinishNodeIfHave();\r\n\r\n    this.needInitCanvas = false;\r\n  };\r\n\r\n  onMouseDown = (event) => {\r\n    const currentX = event.point.x;\r\n    const currentY = event.point.y;\r\n    // const canvasWidth = this.canvas.width;\r\n    // const canvasHeight = this.canvas.height;\r\n    const nodeSize = this.state.nodeSize;\r\n    const currentRow = Math.floor(currentY / nodeSize);\r\n    const currentCol = Math.floor(currentX / nodeSize);\r\n\r\n    // TODO:\r\n    if (this.grid[currentRow][currentCol] === 'start' || this.grid[currentRow][currentCol] === 'finish') {\r\n      this.onMouseDownNodeType = this.grid[currentRow][currentCol];\r\n      this.specialNodesProps.onDragSpecial = true;\r\n    } else {\r\n      this.onMouseDownNodeType = '';\r\n      this.specialNodesProps.onDragSpecial = false;\r\n    }\r\n    // console.log(this.onMouseDownNodeType + ' ' + this.specialNodesProps.onDragSpecial);\r\n    if (this.isCoorsChange(currentRow, currentCol)) {\r\n      this.mouseDownOnce = true;\r\n    }\r\n\r\n    this.onMouseDrag(event);\r\n  };\r\n\r\n  onMouseDrag = (event) => {\r\n    const currentX = event.point.x;\r\n    const currentY = event.point.y;\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    const nodeSize = this.state.nodeSize;\r\n    const currentRow = Math.floor(currentY / nodeSize);\r\n    const currentCol = Math.floor(currentX / nodeSize);\r\n    const brush = this.brush;\r\n    var canDraw = true;\r\n\r\n    if (currentX > canvasWidth || currentX < 0 || currentY > canvasHeight || currentY < 0) {\r\n      return;\r\n    }\r\n\r\n    // if pointed node is undefined, return\r\n    if (!this.grid[currentRow][currentCol]) return;\r\n\r\n    if (this.grid[currentRow][currentCol] === brush.type) return;\r\n\r\n    const specialNodesProps = this.specialNodesProps;\r\n    switch (brush.type) {\r\n      case 'start':\r\n        if (!specialNodesProps.hasStart) {\r\n          specialNodesProps.hasStart = true;\r\n          specialNodesProps.startRow = currentRow;\r\n          specialNodesProps.startCol = currentCol;\r\n        } else canDraw = false;\r\n        break;\r\n      case 'finish':\r\n        if (!specialNodesProps.hasFinish) {\r\n          specialNodesProps.hasFinish = true;\r\n          specialNodesProps.finishRow = currentRow;\r\n          specialNodesProps.finishCol = currentCol;\r\n        } else canDraw = false;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (this.onMouseDownNodeType === 'start' || this.onMouseDownNodeType === 'finish') {\r\n      specialNodesProps.onDragSpecial = true;\r\n    }\r\n    // console.log(this.onMouseDownNodeType + ' ' + this.specialNodesProps.onDragSpecial);\r\n\r\n    if (this.specialNodesProps.onDragSpecial) {\r\n      canDraw = false;\r\n\r\n      //   const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n      //   path.fillColor = brush.brushDict[this.onMouseDownNodeType];\r\n      if (this.onMouseDownNodeType === 'start') {\r\n        const lastNode = this.canvasNodeGroup.children[`${specialNodesProps.startRow}-${specialNodesProps.startCol}`];\r\n        lastNode.fillColor = brush.brushDict['empty'];\r\n        if (specialNodesProps.startRow !== currentRow || specialNodesProps.startCol !== currentCol) {\r\n          this.grid[specialNodesProps.startRow][specialNodesProps.startCol] = 'empty';\r\n          this.grid[currentRow][currentCol] = 'start';\r\n\r\n          specialNodesProps.startRow = currentRow;\r\n          specialNodesProps.startCol = currentCol;\r\n          // print Dijkstra\r\n          if (this.onDrawAlgo) this.printDijkstra();\r\n        }\r\n      } else if (this.onMouseDownNodeType === 'finish') {\r\n        const lastNode = this.canvasNodeGroup.children[`${specialNodesProps.finishRow}-${specialNodesProps.finishCol}`];\r\n        lastNode.fillColor = brush.brushDict['empty'];\r\n        if (specialNodesProps.finishRow !== currentRow || specialNodesProps.finishCol !== currentCol) {\r\n          this.grid[specialNodesProps.finishRow][specialNodesProps.finishCol] = 'empty';\r\n          this.grid[currentRow][currentCol] = 'finish';\r\n\r\n          specialNodesProps.finishRow = currentRow;\r\n          specialNodesProps.finishCol = currentCol;\r\n          // print Dijkstra\r\n          if (this.onDrawAlgo) this.printDijkstra();\r\n        }\r\n      }\r\n      const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n      path.fillColor = brush.brushDict[this.onMouseDownNodeType];\r\n    }\r\n\r\n    // TODO:\r\n    if (canDraw) {\r\n      if (brush.type !== 'start' && this.grid[currentRow][currentCol] === 'start') {\r\n        specialNodesProps.startRow = -1;\r\n        specialNodesProps.startCol = -1;\r\n        specialNodesProps.hasStart = false;\r\n      } else if (brush.type !== 'finish' && this.grid[currentRow][currentCol] === 'finish') {\r\n        specialNodesProps.finishRow = -1;\r\n        specialNodesProps.finishCol = -1;\r\n        specialNodesProps.hasFinish = false;\r\n      }\r\n\r\n      this.grid[currentRow][currentCol] = brush.type;\r\n\r\n      const path = this.canvasNodeGroup.children[`${currentRow}-${currentCol}`];\r\n      path.fillColor = brush.color;\r\n      this.animateNode(path);\r\n\r\n      // TODO: enable animation\r\n      //   const gridLineWidth = this.gridLineWidth;\r\n      //   const tween = path.tween(\r\n      //     {\r\n      //       size: nodeSize + 5,\r\n      //       fillColor: 'yellow',\r\n      //     },\r\n      //     {\r\n      //       easing: 'easeInOutCubic',\r\n      //       duration: 200,\r\n      //     }\r\n      //   );\r\n      //   tween.then(() => {\r\n      //     // ...tween color back to brush color.\r\n      //     path.tweenTo(\r\n      //       {\r\n      //         size: nodeSize - gridLineWidth,\r\n      //         fillColor: brush.color,\r\n      //       },\r\n      //       300\r\n      //     );\r\n      //   });\r\n\r\n      // const text = new PointText(\r\n      //   new Point(\r\n      //     Math.floor(currentX / nodeSize) * nodeSize + nodeSize / 2,\r\n      //     Math.floor(currentY / nodeSize) * nodeSize + nodeSize / 2\r\n      //   )\r\n      // );\r\n      // text.justification = 'center';\r\n      // text.fillColor = 'black';\r\n      // text.content = 'wall';\r\n    }\r\n\r\n    if (this.isCoorsChange(currentRow, currentCol) || this.mouseDownOnce) {\r\n      this.mouseDownOnce = false;\r\n      if (this.onDrawAlgo) this.printDijkstra();\r\n    }\r\n  };\r\n\r\n  setUpInitStartFinishNodeInView = () => {\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    if (canvasWidth > 400 && canvasHeight > 400) {\r\n      const coors = this.getNodeIndexAtPosition(canvasWidth, canvasHeight);\r\n      this.specialNodesProps = {\r\n        startRow: Math.floor(coors[0] / 2),\r\n        startCol: Math.floor(coors[1] / 3),\r\n        finishRow: Math.floor(coors[0] / 2),\r\n        finishCol: Math.floor((2 * coors[1]) / 3),\r\n        hasStart: true,\r\n        hasFinish: true,\r\n      };\r\n      this.grid[this.specialNodesProps.startRow][this.specialNodesProps.startCol] = 'start';\r\n      this.grid[this.specialNodesProps.finishRow][this.specialNodesProps.finishCol] = 'finish';\r\n    } else {\r\n      this.specialNodesProps = {\r\n        startRow: -1,\r\n        startCol: -1,\r\n        finishRow: -1,\r\n        finishCol: -1,\r\n        hasStart: false,\r\n        hasFinish: false,\r\n        lastRow: -1,\r\n        lastCol: -1,\r\n      };\r\n    }\r\n  };\r\n\r\n  // TODO:\r\n  getNodeIndexAtPosition = (posX, posY) => {\r\n    const canvasWidth = this.canvas.width;\r\n    const canvasHeight = this.canvas.height;\r\n    const nodeSize = this.state.nodeSize;\r\n\r\n    const row = Math.floor(canvasHeight / nodeSize);\r\n    const col = Math.floor(canvasWidth / nodeSize);\r\n    return [row, col];\r\n  };\r\n\r\n  initStartAndFinishNodeIfHave = () => {\r\n    const hasStart = this.specialNodesProps.hasStart;\r\n    const hasFinish = this.specialNodesProps.hasFinish;\r\n    const startRow = this.specialNodesProps.startRow;\r\n    const startCol = this.specialNodesProps.startCol;\r\n    const finishRow = this.specialNodesProps.finishRow;\r\n    const finishCol = this.specialNodesProps.finishCol;\r\n\r\n    if (hasStart) {\r\n      const path = this.canvasNodeGroup.children[`${startRow}-${startCol}`];\r\n      path.fillColor = this.brush.brushDict['start'];\r\n      this.grid[startRow][startCol] = 'start';\r\n    }\r\n    if (hasFinish) {\r\n      const path = this.canvasNodeGroup.children[`${finishRow}-${finishCol}`];\r\n      path.fillColor = this.brush.brushDict['finish'];\r\n      this.grid[finishRow][finishCol] = 'finish';\r\n    }\r\n  };\r\n\r\n  isCoorsChange = (currentRow, currentCol) => {\r\n    const specialNodesProps = this.specialNodesProps;\r\n    if (specialNodesProps.lastRow !== currentRow || specialNodesProps.lastCol !== currentCol) {\r\n      specialNodesProps.lastRow = currentRow;\r\n      specialNodesProps.lastCol = currentCol;\r\n      console.log('coors change');\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  animateNode = (path) => {\r\n    const colorBefore = path.fillColor;\r\n    path.fillColor = 'yellow';\r\n    const tween = path.tween(\r\n      {\r\n        size: this.state.nodeSize + 5,\r\n        fillColor: '#fffc4f',\r\n      },\r\n      {\r\n        easing: 'easeInOutCubic',\r\n        duration: 200,\r\n      }\r\n    );\r\n    tween.then(() => {\r\n      // ...tween color back to color before.\r\n      path.tweenTo(\r\n        {\r\n          size: this.state.nodeSize - this.gridLineWidth,\r\n          fillColor: colorBefore,\r\n        },\r\n        300\r\n      );\r\n    });\r\n  };\r\n\r\n  handleMouseUp() {\r\n    console.log('up');\r\n    // this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  test1() {\r\n    console.log('test1:');\r\n    console.log(this.specialNodesProps);\r\n  }\r\n\r\n  test2() {\r\n    console.log('test2:');\r\n    this.gridLineWidth = 0;\r\n    this.resetCanvasGridSize();\r\n  }\r\n\r\n  getInitialNodes = () => {\r\n    const nodeSize = this.state.nodeSize;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n\r\n    const grid = [];\r\n    for (let row = 0; row < rows; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        currentRow.push('empty');\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n\r\n  getInitialCanvasNodes = () => {\r\n    var canvasNodeGroup = new Group();\r\n\r\n    const nodeSize = this.state.nodeSize;\r\n    const gridLineWidth = this.gridLineWidth;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        const path = new Shape.Rectangle({\r\n          fillColor: 'white',\r\n          center: [col * nodeSize + nodeSize / 2, row * nodeSize + nodeSize / 2],\r\n          size: nodeSize - gridLineWidth,\r\n          name: `${row}-${col}`,\r\n        });\r\n        canvasNodeGroup.addChild(path);\r\n\r\n        if (row === 0 || col === 0) {\r\n          const text = new PointText(new Point(col * nodeSize + nodeSize / 2, row * nodeSize + nodeSize / 2));\r\n          text.justification = 'center';\r\n          text.fillColor = 'grey';\r\n          text.content = row === 0 ? col : row;\r\n          canvasNodeGroup.addChild(text);\r\n        }\r\n      }\r\n    }\r\n    this.canvasNodeGroup = canvasNodeGroup;\r\n  };\r\n\r\n  resetCanvasGridSize = () => {\r\n    const nodeSize = this.state.nodeSize;\r\n    const gridLineWidth = this.gridLineWidth;\r\n    const rows = Math.ceil(this.canvas.height / nodeSize);\r\n    const cols = Math.ceil(this.canvas.width / nodeSize);\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < cols; col++) {\r\n        if (this.canvasNodeGroup.children[`${row}-${col}`]) {\r\n          const path = this.canvasNodeGroup.children[`${row}-${col}`];\r\n          path.size = nodeSize - gridLineWidth;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  setBrush = (brushType) => {\r\n    if (['empty', 'wall', 'start', 'finish'].includes(brushType)) {\r\n      this.brush.setType(brushType);\r\n    }\r\n  };\r\n\r\n  printDijkstra = () => {\r\n    console.log('printDijkstra');\r\n    // TODO:\r\n    const temp = this.specialNodesProps;\r\n    if (!temp.hasStart || !temp.hasFinish) {\r\n      console.log('missing start or finish node');\r\n      return;\r\n    }\r\n\r\n    const resultArray = dijkstra(this.grid, temp.startRow, temp.startCol, temp.finishRow, temp.finishCol);\r\n    const visitedNodesInOrder = resultArray[0];\r\n    const nodesInShortestPathOrder = resultArray[1];\r\n\r\n    for (let row = 0; row < this.grid.length; row++) {\r\n      for (let col = 0; col < this.grid[0].length; col++) {\r\n        const path = this.canvasNodeGroup.children[`${row}-${col}`];\r\n        path.fillColor = this.brush.brushDict[this.grid[row][col]];\r\n      }\r\n    }\r\n\r\n    if (visitedNodesInOrder !== null) {\r\n      visitedNodesInOrder.forEach((node) => {\r\n        const path = this.canvasNodeGroup.children[`${node.row}-${node.col}`];\r\n        if (\r\n          (node.row !== temp.startRow || node.col !== temp.startCol) &&\r\n          (node.row !== temp.finishRow || node.col !== temp.finishCol)\r\n        )\r\n          path.fillColor = '#3A8FB7';\r\n      });\r\n    } else {\r\n      console.log('visitedNodesInOrder is null');\r\n    }\r\n\r\n    if (nodesInShortestPathOrder !== null) {\r\n      nodesInShortestPathOrder.forEach((node) => {\r\n        const path = this.canvasNodeGroup.children[`${node.row}-${node.col}`];\r\n        if (\r\n          (node.row !== temp.startRow || node.col !== temp.startCol) &&\r\n          (node.row !== temp.finishRow || node.col !== temp.finishCol)\r\n        ) {\r\n          path.fillColor = '#d6ff75';\r\n        }\r\n      });\r\n    } else {\r\n      console.log('nodesInShortestPathOrder is null');\r\n    }\r\n  };\r\n\r\n  animateAlgorithm = () => {\r\n    this.onDrawAlgo = true;\r\n    this.printDijkstra();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <StyledComponent styleMap={PathfindStyle}>\r\n        {(useStyles) => {\r\n          const styles = useStyles(this.props);\r\n          return (\r\n            <div className={styles.main}>\r\n              <div className={styles.top_navigation_bar} id=\"top_navigation_bar\">\r\n                <AppBar position=\"static\">\r\n                  <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                      <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={styles.title}>\r\n                      Interactive Visualized Pathfinder\r\n                    </Typography>\r\n                    {/* <Button color=\"inherit\">Login</Button> */}\r\n                  </Toolbar>\r\n                </AppBar>\r\n              </div>\r\n              <div className={styles.left_tool_box}>\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                  <ListItem\r\n                    button\r\n                    onClick={() =>\r\n                      (this.brushColor = this.brushColor === this.gridLineColor ? 'blue' : this.gridLineColor)\r\n                    }\r\n                  >\r\n                    <ListItemText primary=\"changeColor\" />\r\n                  </ListItem>\r\n                  <ListItem button onClick={() => console.log(this.grid)}>\r\n                    <ListItemText primary=\"show nodes\" />\r\n                  </ListItem>\r\n                  <ListItem button>\r\n                    <ListItemText primary=\"do something\" />\r\n                  </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.test1()}>\r\n                      Props\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.animateAlgorithm()}>\r\n                      Dijk\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.test2()}>\r\n                      TEST2\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('start')}>\r\n                      start\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('finish')}>\r\n                      finish\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('wall')}>\r\n                      wall\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.setBrush('empty')}>\r\n                      empty\r\n                    </Button>\r\n                  </ListItem>\r\n                  <ListItem>\r\n                    <Button variant=\"outlined\" onClick={() => this.resetCanvas()}>\r\n                      reset\r\n                    </Button>\r\n                  </ListItem>\r\n                </List>\r\n              </div>\r\n              <div className={styles.main_canvas}>\r\n                <canvas\r\n                  resize=\"true\"\r\n                  style={{ width: '100%', height: '100%', backgroundColor: this.gridLineColor }}\r\n                  ref={(el) => {\r\n                    this.canvas = el;\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </StyledComponent>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Pathfind from './Pathfind';\r\n\r\nconst PathfindPage = () => {\r\n  return (\r\n    <div>\r\n      <Pathfind />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PathfindPage;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport PathfindPage from '../components/pages/Pathfind/PathfindPage';\r\n\r\nconst MainRoute = () => (\r\n  <Switch>\r\n    <Route path=\"/visual-pathfind\">\r\n      <PathfindPage></PathfindPage>\r\n    </Route>\r\n    <Route path=\"/\">\r\n      <Redirect to=\"/visual-pathfind\" />\r\n    </Route>\r\n  </Switch>\r\n);\r\n\r\nexport default MainRoute;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MainRoute from './route/MainRoute';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Pathfind from './components/pages/Pathfind/Pathfind'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <MainRoute />\n        </Router>\n        {/* <Pathfind></Pathfind> */}\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}